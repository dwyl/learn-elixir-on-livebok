# SurrealDB

```elixir
Mix.install([
  {:surreal_ex, "~> 0.2.0"}
])
```

## A word on SurrealDB

SQLite is a great lightweight serverless and transactional (ACID compliant) Relational Database. It is designed for small databases and runs a single file. Therefor it is suitable for running on embedded devices. With the model of "off-line first", you will always use the local database (SQLite), and when the user has internet access, you sync the databases.
However, it may be difficult to synchronize with a backend: how to perform bidirectional data synchronisation and when the sync process should take place.

This seems where SurrealDB comes into play. It is a cloud native database that claims to synchronize to a backend. !! This needs to be demsontrated !!

> [An example](https://developer.android.com/topic/libraries/architecture/workmanager) of the technology used with Android.

SurrealDB is essentially a lightweight key/value ACID compliant database. By default, it is **schemaless** so you can insert any key/value. Every record is identified by the table it is stored in. Once we are fixed with our data structure, we can turn a table into a schemafull table to get more control on insertions.

If you run locallly, you need to start a server (like Postgres or Redis). It can also be run "serverless", meaning that you reach a service in the cloud. The server provides a REST api and a unique endpoint at "/sql".

It can run the database in-memory. This configuration is used here.

SurrealDB has its own SQL like DSL. You can pass "SurQL" queries to the "/sql" endpoint. There is also a REST api but we won't use it here. The Elixir `SurrealEx` package offers some CRUD routines. It is however very easy to write directly SurQL queries. This form will be used here.

Websockets aren't documented [at the moment](https://surrealdb.com/docs/integration/websockets). This would make a lot of sense combined with events.

## Start a local SurrealDB server

Once Docker is launched, you can start a SurrealDB session running the database in-memory with the following credentials: "user", "pass", "location-of-the-database":

```bash
docker run --rm -p 8000:8000 surrealdb/surrealdb:latest start --log debug --user root --pass root memory
```

or if you have SurrealDB installed, run in a terminal:

```bash
surreal start --log debug --user root --pass root memory
```

You should get the following prompt:

```bash

 .d8888b.                                             888 8888888b.  888888b.
d88P  Y88b                                            888 888  'Y88b 888  '88b
Y88b.                                                 888 888    888 888  .88P
 'Y888b.   888  888 888d888 888d888  .d88b.   8888b.  888 888    888 8888888K.
    'Y88b. 888  888 888P'   888P'   d8P  Y8b     '88b 888 888    888 888  'Y88b
      '888 888  888 888     888     88888888 .d888888 888 888    888 888    888
Y88b  d88P Y88b 888 888     888     Y8b.     888  888 888 888  .d88P 888   d88P
 'Y8888P'   'Y88888 888     888      'Y8888  'Y888888 888 8888888P'  8888888P'


[2023-02-18 20:12:12] INFO  surrealdb::iam Root authentication is enabled
[2023-02-18 20:12:12] INFO  surrealdb::iam Root username is 'root'
[2023-02-18 20:12:12] INFO  surrealdb::dbs Database strict mode is disabled
[2023-02-18 20:12:12] INFO  surrealdb::kvs Starting kvs store in memory
[2023-02-18 20:12:12] INFO  surrealdb::kvs Started kvs store in memory
[2023-02-18 20:12:12] INFO  surrealdb::net Starting web server on 0.0.0.0:8000
[2023-02-18 20:12:12] INFO  surrealdb::net Started web server on 0.0.0.0:8000
```

## SurrealDB CLI

You can send POST requests via `cURL` with a payload, the two headers (NS for namespace, DB for database) and a BASIC Authentication to the endpoint:

```bash
data = "create tab:john name='john'"

curl -k -L -s --compressed POST \
	--header "Accept: application/json" \
	--header "NS: test" \
	--header "DB: test" \
	--user "root:root" \
	--data "${DATA}" \
	http://localhost:8000/sql
```

You can also [connect](https://surrealdb.com/docs/cli/sql) to the server with the [CLI](https://surrealdb.com/docs/cli/start), once installed. You run `surreal sql` followed by:

* the connection as the "localhost:8000" since by default it will reach the cloud (default is https://cloud.surrealdb.com),
* and the _namespace_ and the _database name_,
* the basic authentication of the super-user.

```bash
$ surreal sql --conn http://localhost:8000 --user root --pass root --ns testns --db testdb

> create tab:john name='john';

[{"time": "1.47255ms", "status": "OK", "results: "{...}}]
```

## Start a connection from Elixir

You can simply connect via an HTTP client and pass your query once you defined the correct headers and authentication:

```elixir
url = "http://localhost:8000/sql"

headers = [
  {"accept", "application/json"},
  {"Content-Type", "application/json"},
  {"NS", "testns"},
  {"DB", "testdb"}
]

auth = [hackney: [basic_auth: {"root", "root"}]]

query = "create test:1 set v='a';"

HTTPoison.post!(url, query, headers, auth)
|> Map.get(:status_code)
```

You can get the response:

```elixir
HTTPoison.post!(url, "select * from test;", headers, auth)
|> Map.get(:body)
|> Jason.decode!()
```

#### SurrealEx

We will use the package [SurrealEx](https://hexdocs.pm/surreal_ex/readme.html). You have two ways to setup the package. Firstly, you setup a config file as below. For Livebook, put the file below in your root directory, and add the key `config_path: "config.exs"` in the `Mix.install` of the Livebook.

<!-- livebook:{"break_markdown":true} -->

<!-- livebook:{"force_markdown":true} -->

```elixir
#config.exs
import Config

config :surreal_ex, Conn,
  interface: :http,
  uri: "http://localhost:8000",
  ns: "testns",
  db: "testdb",
  user: "root",
  pass: "root"
```

The Notebook dependencies can be setup with:

<!-- livebook:{"force_markdown":true} -->

```elixir
Mix.install([{:surreal_ex, "~> 0.2.0"}], config_path: "config.exs")
```

<!-- livebook:{"break_markdown":true} -->

* You can alternatively use the module `SurrealEx.Config`. Let's define a module `Conn` to wrap the config.

```elixir
defmodule Conn do
  @config [
    interface: :http,
    uri: "http://localhost:8000",
    ns: "test",
    db: "test",
    user: "root",
    pass: "root"
  ]
  use SurrealEx.Conn

  def setup do
    @config
    |> SurrealEx.Config.for_http()
    |> SurrealEx.Config.set_config_pid()
  end
end
```

You describe the config: uri, (namespace, database) and basic auth, and pass it to the `Conn` module which uses the `SurrealEx.Conn` behaviour:

```elixir
config = [
  interface: :http,
  uri: "http://localhost:8000",
  ns: "test",
  db: "test",
  user: "root",
  pass: "root"
]

Conn.setup()
cfg = SurrealEx.Config.get_config(Conn)
```

We can now use this database with `Conn.sql("my SurQL query")`

## Schemaless

#### CREATE

Every row is identified relatively to a table.
To **CREATE** a row with the "SurQL" DSL, we pass a table name and possibly a _unique id_ in the format  `<table>:<id>` and **SET** the body with a list of `<key>=<value>`. You then pass the  SurQL query to the `YOURMODULE.sql` function.

> Each individual statement within SurrealDB is run within its own transaction. When we pass an id, the transaction can be run only once.

```elixir
query = "CREATE developper:nelson SET name = 'nelson', status= 'founder';"
Conn.sql(query)
```

A good practice is to return the id when you run a mutating query. This is the case with the response tuple.

```elixir
{:ok, %{result: %{"id" => id}}} = Conn.sql("CREATE developper SET name = 'john', status = 'dev';")
[_, john_id] = String.split(id, ":")
```

Alternatively, you can use the package DSL with the module [SurrealEx.HTTP](https://hexdocs.pm/surreal_ex/SurrealEx.HTTP.html#create/3): you reach the REST API provided by SurrealDB. You pass the config, the table name and a payload.

> Note that you cannot pass an id. SurrealDB will assign an id for you. In this case, the query below can be run multiple times.

```elixir
{:create, row_id} = SurrealEx.HTTP.create(cfg, :developper, "{name: 'bob', status: 'trainee'}")

[_, bob_id] = String.split(row_id, ":")
```

You can also use the `SurrealEx.HTTP` api to `.get` a specific row:

```elixir
{
  SurrealEx.HTTP.get(cfg, :developper, "nelson"),
  SurrealEx.HTTP.get(cfg, :developper, john_id),
  SurrealEx.HTTP.get(cfg, :developper, bob_id)
}
```

We check the table:

```elixir
Conn.sql("SELECT * FROM developper;")
```

You can use a **transaction** for a set of changes. You can use `CREATE` and pass params, or run an  `INSERT INTO` and pass a JSON object.

```elixir
query = "
  BEGIN TRANSACTION;
  CREATE developper:lucio SET name = 'lucio', status = 'dev';
  INSERT INTO developper {name: 'nd', id: 'nd', status: 'trainee'};
  COMMIT TRANSACTION;"

Conn.sql(query)
```

#### Multiple inserts

<!-- livebook:{"break_markdown":true} -->

You pass an array of tuples. You can pass an id, or let Surreal do it for you if you don't need get retrive them immediatly.

```elixir
Conn.sql("
  INSERT INTO agency [{name: 'one'}, {name: 'two', id: 'two'}];
")
Conn.sql("SELECT * FROM agency")
```

#### Record links

You can pass a nested object with the _dot_ **"."** format. Note how we can pass **record links** of the "developper" table into the "webapp" table.

```elixir
query = "CREATE webapp:surreal SET 
  app_name = 'surrealistic.com',
  agency.team = [developper:nelson, developper:lucio, developper:`#{john_id}`, developper:nd],
  agency.name = 'dwyl.com';"

Conn.sql(query)
```

You can pass the data in JSON format:

```elixir
query =
  "INSERT INTO webapp 
{id: 'json_app', app_name: 'json',agency: {name: 'dwyl.com', team: [developper:nelson, developper:lucio]}};"

Conn.sql(query)
```

```elixir
Conn.sql("UPDATE webapp:json_app SET app_name='json.com';")
```

```elixir
Conn.sql("SELECT * FROM webapp;")
```

#### "has_many" query nested records without "join"

We can get linked data **without joins** with the dot `.` notation:

```elixir
Conn.sql("SELECT agency.team.*.name FROM webapp:surreal;")
```

```elixir
Conn.sql("SELECT agency.team.*.status FROM webapp:json_app;")
```

#### Aggregation query

Return the number of developpers in the team for the webapp "json_app"

```elixir
{:ok, %{result: result}} = Conn.sql("SELECT * from array::len(webapp:json_app.agency.team);")

result
```

Return the number of developpers and there names per project:

```elixir
Conn.sql("
SELECT agency.team.*.name, count(agency.team) from webapp;
")
# SELECT count() FROM type::table('developper') GROUP BY webapp;
```

#### Parameters and subqueries

We can run queries with parameters. Given a webapp, get the names of the team members with status "dev":

```elixir
defmodule Filter do
  def get_in(webapp, status) do
    Conn.sql("
      LET $agency = (SELECT agency FROM webapp:#{webapp});
      LET $dev = (SELECT team[where status ='#{status}'] FROM $agency);
      SELECT name from $dev;
    ")
  end
end

Filter.get_in("surreal", "dev")
```

## Graph connections

Suppose we have a 1-n relation between agencies and webapps, and a 1-n relation between agencies and devs. In a conventional DB, we would have a foreign key "agency_id" in the table Webapp (Webapp belongs_to Agency), and a foreign key "agency_id" in the Dev table (Dev belongs_to Agency).

<!-- livebook:{"break_markdown":true} -->

```mermaid
erDiagram
    agencies ||--|{ webapps : developped
    webapps {
        string app_name
        string agency_id
    }
    
    agencies {
        int name
    }
    agencies ||--|{ devs : hires
    devs {
        string name
        string status
        string agency_d
    }
```

<!-- livebook:{"break_markdown":true} -->

With SurrealDB, we can use 2 approaches:

* set an array of [webapp_ids] and an array of [dev_ids] as fields of the table Agency,
* or set connections between the nodes.

<!-- livebook:{"break_markdown":true} -->

#### Array of linked records

The ERD of the first approach is shown below:

<!-- livebook:{"break_markdown":true} -->

```mermaid
erDiagram
    webapps {
        string name
    }

    agencies {
        int name
        array webapps
        array team
    }

    agencies ||--|{ webapps : developped

    agencies ||--|{ devs : hires

    devs {
        string name
        string status
    }
```

<!-- livebook:{"break_markdown":true} -->

We added a field "team" and webapps which respectively stores all the devs employed and the webapps developed by an agency.

```elixir
Conn.sql("
BEGIN TRANSACTION;
  create webapp:app1 set name = 'app1';
  create webapp:app2 set name = 'app2';
  create webapp:app3 set name = 'app3';

  create dev:nelson set name = 'nelson', status = 'founder';
  create dev:nd set name = 'nd', status = 'trainee';
  create dev:lucio set name = 'lucio', status = 'dev';

  create agency:dwyl1 set name = 'dwyl', project = [], team = [];
  create agency:unreal1 set name = 'unreal', project = [], team = [];

  update agency:dwyl1 set projects += [webapp:1, webapp:3];
  update agency:unreal1 set projects += [webapp:2];
  update agency:dwyl1 set team += [dev:nelson, dev:lucio];
  update agency:unreal1 set team += [dev:nd];
COMMIT TRANSACTION;
")
```

We can get the team members name per agency (by omitting the id)  since we have a relation 1-n with record links:

```elixir
Conn.sql("SELECT name AS company, team.*.name AS employees FROM agency:dwyl1")
```

Conversely, find the agency for which a dev works:

```elixir
Conn.sql("SELECT name AS company FROM agency WHERE team CONTAINS dev:nd; ")
```

#### Connections

The second approach with connections is shown below. We setup 2 connections with the 2 verbs "works_for" and "developped". This will generate 2 other tables.

* `[dev:id]->works_for->[agency:id]`
* `[agency:id]->developped->[webapp:id]`

The order is not important as in the first case, it is a 1-1, and a 1-n in the second case. It turns out that we can reverse the links are we will see. A connection is coded with `RELATE @from->verb->@to`

<!-- livebook:{"break_markdown":true} -->

```mermaid
erDiagram

    webapps {
      string name
    }

    developped {
      string created_at
    }

    agencies {
      int name
    }

    agencies ||--|| developped : developped
    developped ||--|{ webapps : developped

    agencies ||--|| works_for : works_for
    works_for ||--|| devs : works_for

    works_for {
      boolean owner
      string  created_at
    }
    devs {
      string name
      string status
    }
```

```elixir
Conn.sql("
BEGIN TRANSACTION;

  CREATE agency:dwyl2 SET name = 'dwyl';
  CREATE agency:unreal2 SET name = 'unreal';

  RELATE dev:lucio->works_for->agency:dwyl2 CONTENT {owner: false, created_at: time::now()};
  RELATE dev:nelson-> works_for->agency:dwyl2 CONTENT {owner: true, created_at: time::now()};
  RELATE dev:nd->works_for->agency:unreal2 CONTENT {owner: true, created_at: time::now()};

  RELATE agency:dwyl2->developped->webapp:app1;
  RELATE agency:unreal2->developped->webapp:app2;
  RELATE agency:dwyl2->developped->webapp:app3;
COMMIT TRANSACTION;
")
```

We can take a peek at the association-table "works_for":

```elixir
Conn.sql("select * from developped;")
```

We have an association `[dev:id]->works_for->[agency:id]`. We can query for the _agency.name_ given a _dev:id_:

```elixir
Conn.sql("SELECT name, ->works_for->agency.name AS employer FROM dev:nelson;")
```

We now want all the devs working for a particular agency. We just _revert_ the relation: get all _dev:id_ from _agency:id_:

```elixir
Conn.sql("
  SELECT name, <-works_for<-dev.name AS employees FROM agency:dwyl2;
")
```

Similarly, we can check the webapps name developped by an agency with the association with `[agency:id]->developped->[webapp:id]`.

```elixir
Conn.sql("SELECT ->developped->webapp.name AS agency FROM agency:dwyl2;")
```

To query the agency which developped a given webapp, we reverse the query:

```elixir
Conn.sql("SELECT <-developped<-agency.name AS agency FROM webapp:app2;")
```

We can run _subqueries_ if we want the devs that worked on a given webapp:

```elixir
Conn.sql("
  LET $agency=(SELECT <-developped<-agency.id AS id FROM webapp:app1);
  SELECT  <-works_for<-dev.name AS employees FROM $agency;
")
```

## Schemafull

If we want to enforce a fixed struct, we can define a schema with `DEFINE TABLE..SCHEMAFULL`. We will check below that indeed it enforces or at least saves only "good" records.

We want to setup a one_to_many_through realtion with 3 tables. The ERD is shown below. Since we will get nested data in each table, we create a table for each nested level, and use `record(<table>)` as the field type to reference the link.

<!-- livebook:{"break_markdown":true} -->

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

```mermaid
erDiagram
WEBAPP ||--|{ DEV: developped_by
    WEBAPP {
        string name
        string agency
        array team
    }
    DEV ||--o| DETAILS : details
    DEV {
        int name
        object details
    }
    DETAILS {
        string email
        int age
        date birthdate
    }
```

```elixir
query = "

DEFINE TABLE details schemafull;
DEFINE FIELD email ON details type string;
DEFINE FIELD age ON details type int;
DEFINE FIELD birthdate ON details type string;

DEFINE TABLE dev schemafull;
DEFINE FIELD name ON dev type string;
DEFINE FIELD details ON dev type record(details);


DEFINE TABLE webapp schemafull;
DEFINE FIELD name ON webapp type string;
DEFINE FIELD agency ON webapp type string;
DEFINE FIELD team ON webapp type record(dev);
"

Conn.sql(query)
```

We can `INSERT INTO` (and set the `:id`), or `CREATE SET`. We can pass nested links. SurrealDB [understands dates](https://surrealdb.com/docs/surrealql/datamodel/datetimes).

```elixir
query = "
  BEGIN TRANSACTION;
  INSERT INTO details {email: 'john@com', age: 20, id: 'john', birthdate: '2023-03-01'};
  INSERT INTO dev {name: 'john', id: 'john', details: details:john};
  CREATE dev:lucio SET name = 'lucio';
  CREATE details:lucio SET email='lucio@com', age = 20, birthdate = '2023-03-01';
  INSERT INTO dev {name: 'lucio', id: 'lucio', details: details.lucio};
  INSERT INTO dev {name: 'nelson', id: 'nelson'};
  CREATE app:test SET agency = 'dwyl.com', team = [dev:nelson, dev:lucio];
  COMMIT TRANSACTION;
  "
Conn.sql(query)
```

We check our insertions:

```elixir
Conn.sql("SELECT name, details.* FROM dev;")
```

#### Prevent bad insertions

Let's insert a "bad" record into the "details" table: we see that the field "age" has been set to 0, and the field "occupation" ignored.

```elixir
Conn.sql("INSERT  INTO details {gender: 'f', occupation: 'eng', age: 'twenty', id: 'wrong'};")
```

#### Insert into a nested array

Let's create a new "dev" and add him as a team member: we use `array:concat` ([doc](https://surrealdb.com/docs/surrealql/functions/array)) or simply `+=`.

Before:

```elixir
{:ok, %{result: %{"team" => team}}} = Conn.sql("SELECT team from app:test;")
team
```

```elixir
query = "
BEGIN TRANSACTION;
CREATE dev:toto SET name = 'toto';
UPDATE app:test SET team += [dev:toto];
COMMIT TRANSACTION;
"
Conn.sql(query)
# UPDATE app:test SET team = array::concat(team, [dev:toto]);
```

After:

```elixir
{:ok, %{result: %{"team" => team}}} = Conn.sql("SELECT team FROM app:test")
team
```

### Nested query without "join"

This is what the data looks like:

```elixir
Conn.sql("
  SELECT * FROM webapp;
")
```

Let's select per webapp the names of the team members for all apps developped by "dwyl.com":

```elixir
Conn.sql("
  SELECT app_name, agency.team.*.name FROM webapp WHERE agency.name = 'dwyl.com';
")
```

## Events

Let's create an **event** query example. When we change a field, say the birthdate of the table details, we want to create a new table that records this new date. We can do this with `DEFINE EVENT`:

```elixir
Conn.sql("
  DEFINE EVENT passed_birthdates ON TABLE details WHEN $before.birthdate < $after.birthdate 
  THEN (CREATE passed_birthdates SET birthdate = $after.birthdate)
")
```

We update 2 rows of the table "details":

```elixir
Conn.sql("UPDATE details:john SET birthdate='2023-03-02';")
Conn.sql("UPDATE details:lucio SET birthdate='2023-03-02';")
```

We check that the change in the field triggered the action to create a new table where the record has the field with value the new date.

```elixir
Conn.sql("SELECT * FROM passed_birthdates;")
```

## Register User

Provides a registration via JWT

[Source tutorial](https://tutorials.surrealdb.com/community/how-to-use-signin-and-signup.html)

```elixir
query = "
  #---define SCHEMAFULL and PERMISSIONS, then INDEX and SCOPE
  DEFINE TABLE user SCHEMAFULL
  PERMISSIONS
    FOR select, update WHERE id = $auth.id,
    FOR create, delete NONE;
  DEFINE FIELD user ON user TYPE string;
  DEFINE FIELD pass ON user TYPE string;
  DEFINE FIELD email ON user TYPE string;
  DEFINE FIELD role ON user TYPE int;

  DEFINE INDEX idx_user ON user COLUMNS user UNIQUE;

  DEFINE SCOPE allusers
  #-- the JWT session will be valid for 14 days
  SESSION 14d
  
  /* The optional SIGNUP clause will be run when calling the signup method for this scope
  It is designed to create or add a new record to the database.
  If set, it needs to return a record or a record id
  The variables can be passed in to the signin method */

  SIGNUP ( CREATE user SET user = $user, email = $email, role = $role, pass = crypto::argon2::generate($pass))
  
  /* The optional SIGNIN clause will be run when calling the signin method for this scope
  It is designed to check if a record exists in the database.
  If set, it needs to return a record or a record id
  The variables can be passed in to the signin method */

  SIGNIN ( SELECT * FROM user WHERE user = $user AND crypto::argon2::compare(pass, $pass) )
  #-- this optional clause will be run when calling the signup method for this scope
  "

Conn.sql(query)
```

```elixir
{:ok, token} = Conn.register("dev", "4321", "hot@mail.com")
```

```elixir
Conn.sql("SELECT * FROM use WHERE email = 'hot@mail.com';")
```

```elixir
Conn.login("admin", "1234")
```

```elixir
Conn.login("dev", "supersecret")
```
